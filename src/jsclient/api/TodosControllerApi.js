/**
 * 时间管理系统-swagger接口测试工具
 * SpringBoot3 集成 Swagger3接口文档
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TodoDTO from '../model/TodoDTO';
import TodoVO from '../model/TodoVO';

/**
* TodosController service.
* @module api/TodosControllerApi
* @version v1
*/
export default class TodosControllerApi {

    /**
    * Constructs a new TodosControllerApi. 
    * @alias module:api/TodosControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTodo operation.
     * @callback module:api/TodosControllerApi~addTodoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TodoDTO} todoDTO 
     * @param {module:api/TodosControllerApi~addTodoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTodo(todoDTO, callback) {
      // verify the required parameter 'todoDTO' is set
      if (todoDTO === undefined || todoDTO === null) {
        throw new Error("Missing the required parameter 'todoDTO' when calling addTodo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };
      let postBody = {
        ...todoDTO
      }

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/todos/addTodo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTodosById operation.
     * @callback module:api/TodosControllerApi~getTodosByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TodoVO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTodosById
     * @param {Number} id 
     * @param {module:api/TodosControllerApi~getTodosByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TodoVO>}
     */
    getTodosById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTodosById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TodoVO];
      return this.apiClient.callApi(
        '/todos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTodo operation.
     * @callback module:api/TodosControllerApi~removeTodoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<Number>} todoIds 
     * @param {module:api/TodosControllerApi~removeTodoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTodo(todoIds, callback) {
      let postBody = null;
      // verify the required parameter 'todoIds' is set
      if (todoIds === undefined || todoIds === null) {
        throw new Error("Missing the required parameter 'todoIds' when calling removeTodo");
      }

      let pathParams = {
      };
      let queryParams = {
        'todoIds': this.apiClient.buildCollectionParam(todoIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/todos/remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
