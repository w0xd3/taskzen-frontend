/**
 * 时间管理系统-swagger接口测试工具
 * SpringBoot3 集成 Swagger3接口文档
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DurationDTO from '../model/DurationDTO';

/**
* InsightsController service.
* @module api/InsightsControllerApi
* @version v1
*/
export default class InsightsControllerApi {

    /**
    * Constructs a new InsightsControllerApi. 
    * @alias module:api/InsightsControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPList operation.
     * @callback module:api/InsightsControllerApi~getPListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DurationDTO} durationDTO 
     * @param {module:api/InsightsControllerApi~getPListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getPList(durationDTO, callback) {
      let postBody = durationDTO;
      // verify the required parameter 'durationDTO' is set
      if (durationDTO === undefined || durationDTO === null) {
        throw new Error("Missing the required parameter 'durationDTO' when calling getPList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/insight/p', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagList operation.
     * @callback module:api/InsightsControllerApi~getTagListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DurationDTO} durationDTO 
     * @param {module:api/InsightsControllerApi~getTagListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getTagList(durationDTO, callback) {
      let postBody = durationDTO;
      // verify the required parameter 'durationDTO' is set
      if (durationDTO === undefined || durationDTO === null) {
        throw new Error("Missing the required parameter 'durationDTO' when calling getTagList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/insight/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskCompletion operation.
     * @callback module:api/InsightsControllerApi~getTaskCompletionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DurationDTO} durationDTO 
     * @param {module:api/InsightsControllerApi~getTaskCompletionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getTaskCompletion(durationDTO, callback) {
      let postBody = durationDTO;
      // verify the required parameter 'durationDTO' is set
      if (durationDTO === undefined || durationDTO === null) {
        throw new Error("Missing the required parameter 'durationDTO' when calling getTaskCompletion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/insight/getTaskCompletion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskDistribution operation.
     * @callback module:api/InsightsControllerApi~getTaskDistributionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DurationDTO} durationDTO 
     * @param {module:api/InsightsControllerApi~getTaskDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getTaskDistribution(durationDTO, callback) {
      let postBody = durationDTO;
      // verify the required parameter 'durationDTO' is set
      if (durationDTO === undefined || durationDTO === null) {
        throw new Error("Missing the required parameter 'durationDTO' when calling getTaskDistribution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/insight/getTaskDistribution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskTimeSpent operation.
     * @callback module:api/InsightsControllerApi~getTaskTimeSpentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DurationDTO} durationDTO 
     * @param {module:api/InsightsControllerApi~getTaskTimeSpentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getTaskTimeSpent(durationDTO, callback) {
      let postBody = durationDTO;
      // verify the required parameter 'durationDTO' is set
      if (durationDTO === undefined || durationDTO === null) {
        throw new Error("Missing the required parameter 'durationDTO' when calling getTaskTimeSpent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/insight/getTaskTimeSpent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskTrend operation.
     * @callback module:api/InsightsControllerApi~getTaskTrendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DurationDTO} durationDTO 
     * @param {module:api/InsightsControllerApi~getTaskTrendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getTaskTrend(durationDTO, callback) {
      let postBody = durationDTO;
      // verify the required parameter 'durationDTO' is set
      if (durationDTO === undefined || durationDTO === null) {
        throw new Error("Missing the required parameter 'durationDTO' when calling getTaskTrend");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/insight/getTaskTrend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
